Author: Hans de Goede
Origin: http://cvs.rpmfusion.org/viewvc/rpms/zsnes/devel/zsnes-1.51-FORTIFY_SOURCE.patch?root=free&view=markup
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/intrepid/+source/zsnes/+bug/250425
Subject: Upstream has strange memory manipulations that upset FORTIFY_SOURCE
 The problem is an interaction between the uncommon (to put it mildly) way
 zsnes calls memcpy to restore its global state from the "regsbackup" buffer,
 and _FORTIFY_SOURCE:
 .
 gcc -ggdb3 -pipe -I. -I/usr/local/include -I/usr/include -D__UNIXSDL__
 -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT -DNO_DEBUGGER -D__LIBAO__
 -D__OPENGL__ -march=i486 -O3 -fomit-frame-pointer -fprefetch-loop-arrays
 -fforce-addr -s -D__RELEASE__ -o initc.o -c initc.c
 [...]
 In function ‘memcpy’,
    inlined from ‘powercycle’ at initc.c:2624:
 /usr/include/bits/string3.h:52: warning: call to __builtin___memcpy_chk will
 always overflow destination buffer
 .
 The corresponding block of code is:
 .
    sramsavedis = 0;
    memcpy(&sndrot, regsbackup, 3019);
 .
 And the declaration for the relevant variables, from the same file:
 .
 extern unsigned char NextLineCache, sramsavedis, sndrot, regsbackup[3019];
 .
 The reason this strange memcpy call will always work correctly is that the
 storage for sndrot and the rest of the state variables is allocated in
 assembly (cpu/regs.inc, included from cpu/table.asm), in a way which
 guarantees that all the correct variables will be sequential in memory, with
 no padding (sndrot is just the first variable on that block). However, gcc
 cannot know that; it sees instead an attempt to write 3019 bytes to a single
 byte-sized variable, which will obviously overflow (and, in fact, overflowing
 is precisely the desired behaviour!).
 <https://bugs.launchpad.net/ubuntu/intrepid/+source/zsnes/+bug/250425/comments/45>

--- a/src/initc.c
+++ b/src/initc.c
@@ -1464,8 +1464,8 @@ void clearmem()
   clearmem2();
 }
 
-extern unsigned char BRRBuffer[32];
-extern unsigned char echoon0;
+extern unsigned char BRRBuffer[];
+extern unsigned char echoon0[];
 extern unsigned int PHdspsave;
 extern unsigned int PHdspsave2;
 unsigned char echobuf[90000];
@@ -1479,7 +1479,7 @@ void clearvidsound()
   memset(vidmemch4, 0, 4096);
   memset(vidmemch8, 0, 4096);
   memset(BRRBuffer, 0, PHdspsave);
-  memset(&echoon0, 0, PHdspsave2);
+  memset(echoon0, 0, PHdspsave2);
   memset(echobuf, 0, 90000);
   memset(spcBuffera, 0, 65536*4+4096);
   memset(DSPMem, 0, 256);
@@ -1822,7 +1822,7 @@ unsigned int showinfogui()
 
 extern unsigned int nmiprevaddrl, nmiprevaddrh, nmirept, nmiprevline, nmistatus;
 extern unsigned char spcnumread, yesoutofmemory;
-extern unsigned char NextLineCache, sramsavedis, sndrot, regsbackup[3019];
+extern unsigned char NextLineCache, sramsavedis, sndrot[], regsbackup[3019];
 extern unsigned int Voice0Freq, Voice1Freq, Voice2Freq, Voice3Freq;
 extern unsigned int Voice4Freq, Voice5Freq, Voice6Freq, Voice7Freq;
 extern unsigned int dspPAdj;
@@ -2621,7 +2621,7 @@ void powercycle(bool sramload, bool roml
     }
 
     sramsavedis = 0;
-    memcpy(&sndrot, regsbackup, 3019);
+    memcpy(sndrot, regsbackup, 3019);
 
     if (yesoutofmemory) { asm_call(outofmemfix); }
     asm_call(GUIDoReset);
--- a/src/zstate.c
+++ b/src/zstate.c
@@ -99,15 +99,15 @@ static void copy_snes_data(unsigned char
   copy_func(buffer, &cycpbl, 4);
   copy_func(buffer, &cycpblt, 4);
   //SNES PPU Register status
-  copy_func(buffer, &sndrot, 3019);
+  copy_func(buffer, sndrot, 3019);
 }
 
 static void copy_spc_data(unsigned char **buffer, void (*copy_func)(unsigned char **, void *, size_t))
 {
   //SPC stuff, DSP stuff
   copy_func(buffer, SPCRAM, PHspcsave);
-  copy_func(buffer, &BRRBuffer, PHdspsave);
-  copy_func(buffer, &DSPMem, sizeof(DSPMem));
+  copy_func(buffer, BRRBuffer, PHdspsave);
+  copy_func(buffer, DSPMem, sizeof(DSPMem));
 }
 
 static void copy_extra_data(unsigned char **buffer, void (*copy_func)(unsigned char **, void *, size_t))
@@ -156,7 +156,7 @@ static void copy_state_data(unsigned cha
     /*
     if (buffer) //Rewind stuff
     {
-      copy_func(&buffer, &echoon0, PHdspsave2);
+      copy_func(&buffer, echoon0, PHdspsave2);
     }
     */
   }
--- a/src/gblvars.h
+++ b/src/gblvars.h
@@ -33,9 +33,9 @@ extern unsigned int nmirept, nmiprevline
 extern unsigned int SfxR0, *setaramdata, ramsize, *sram, nmiprevaddrh;
 extern unsigned int tempesi, tempedi, tempedx, tempebp;
 extern unsigned int SPCMultA, PHnum2writespc7110reg, PHdspsave2;
-extern unsigned char sndrot, SPCRAM[65472], DSPMem[256], SA1Status, *SA1RAMArea;
-extern unsigned char DSP1Enable, DSP1COp, prevoamptr, BRRBuffer[32], *romdata;
-extern unsigned char curcyc, echoon0, spcnumread, NextLineCache, HIRQNextExe;
+extern unsigned char sndrot[], SPCRAM[65472], DSPMem[256], SA1Status, *SA1RAMArea;
+extern unsigned char DSP1Enable, DSP1COp, prevoamptr, BRRBuffer[], *romdata;
+extern unsigned char curcyc, echoon0[], spcnumread, NextLineCache, HIRQNextExe;
 extern unsigned char vidmemch4[4096], vidmemch8[4096], vidmemch2[4096];
 
 extern bool C4Enable, SFXEnable, SA1Enable, SPC7110Enable, SETAEnable, DSP4Enable, spcon;
